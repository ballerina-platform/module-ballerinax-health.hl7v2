name: execute-build

on:
  workflow_call:
    inputs:
      working_dir:
        required: true
        type: string
      bal_central_environment:
        required: true
        type: string
      ballerina_version:
        required: true
        type: string
env:
  BALLERINA_VERSION: ${{ inputs.ballerina_version}}
jobs:
  release:
    runs-on: ubuntu-latest
    env:
       JAVA_OPTS: -Xmx4G
    steps:
      - uses: actions/checkout@v3

      - name: Set Up Ballerina
        uses: ballerina-platform/setup-ballerina@v1.1.0
        with:
          version: $BALLERINA_VERSION

      - name: Run ballerina build for staging
        if: inputs.bal_central_environment == 'STAGE'
        env:
          BALLERINA_STAGE_CENTRAL: true
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_STAGE_ACCESS_TOKEN }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal pack
          popd

      - name: Run ballerina build for dev
        if: inputs.bal_central_environment == 'DEV'
        env:
          BALLERINA_DEV_CENTRAL: true
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_DEV_ACCESS_TOKEN }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal pack
          popd 

      - name: Run ballerina build for prod
        if: inputs.bal_central_environment == 'PROD'
        run: |
          pushd "${{ inputs.working_dir }}"
          bal pack
          popd

      - name: Push to Staging
        if: inputs.bal_central_environment == 'STAGE'
        env:
            BALLERINA_STAGE_CENTRAL: true
            BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_STAGE_ACCESS_TOKEN }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal push
          popd

      - name: Push to Dev
        if: inputs.bal_central_environment == 'DEV'
        env:
          BALLERINA_DEV_CENTRAL: true
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_DEV_ACCESS_TOKEN }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal push
          popd       

      - name: Push to Prod
        if: inputs.bal_central_environment == 'PROD'
        env:
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_ACCESS_TOKEN }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal push
          popd

      - name: Publish Release
        if: inputs.bal_central_environment == 'PROD'
        id: publish_release
        run: |
          # Get Branch Name
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          # Release name
          RELEASE_NAME=${BRANCH_NAME#release-}
          curl \
            -s -X POST \
            -H "Authorization: Bearer ${{ secrets.BALLERINA_BOT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "tag_name": "'$RELEASE_NAME'",
              "name": "'$RELEASE_NAME'",
              "body": "[Automated] Creating tag:  '$RELEASE_NAME'.",
              "draft": false,
              "prerelease": false,
              "target_commitish": "'$BRANCH_NAME'"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/releases"

      - name: Update version in Ballerina.toml
        if: ${{ inputs.bal_central_environment == 'PROD' }}
        id: increment_patch_version
        run: |
          CURRENT_VERSION=$(grep -Po -m 1 '(?<=version = ")[\d.]+' ${{ inputs.working_dir }}/Ballerina.toml)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH_VERSION=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
          sed -i "0,/version = \"${CURRENT_VERSION}\"/s//version = \"${NEW_VERSION}\"/" ${{ inputs.working_dir }}/Ballerina.toml
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "MAJOR_VERSION=${VERSION_PARTS[0]}" >> $GITHUB_OUTPUT

      - name: Check and update initializer.bal version
        if: ${{ inputs.bal_central_environment == 'PROD' }}
        id: update_initializer
        run: |
          # Check if initializer.bal exists
          if [ -f "${{ inputs.working_dir }}/initializer.bal" ]; then
            # Extract current version from initializer.bal
            CURRENT_INIT_VERSION=$(grep -Po '(?<=java:fromString\(")[0-9]+(?="\)\)$)' "${{ inputs.working_dir }}/initializer.bal" | head -1)
            
            if [ -n "$CURRENT_INIT_VERSION" ]; then
              # Check if major version in Ballerina.toml is different from initializer.bal
              if [ "$CURRENT_INIT_VERSION" != "${{ steps.increment_patch_version.outputs.MAJOR_VERSION }}" ]; then
                echo "Major version mismatch detected. Updating initializer.bal from $CURRENT_INIT_VERSION to ${{ steps.increment_patch_version.outputs.MAJOR_VERSION }}"
                # Update the version in initializer.bal
                sed -i "s/java:fromString(\"$CURRENT_INIT_VERSION\")/java:fromString(\"${{ steps.increment_patch_version.outputs.MAJOR_VERSION }}\")/g" "${{ inputs.working_dir }}/initializer.bal"
                echo "INITIALIZER_UPDATED=true" >> $GITHUB_OUTPUT
                echo "OLD_INIT_VERSION=$CURRENT_INIT_VERSION" >> $GITHUB_OUTPUT
                echo "NEW_INIT_VERSION=${{ steps.increment_patch_version.outputs.MAJOR_VERSION }}" >> $GITHUB_OUTPUT
              else
                echo "No major version change detected in initializer.bal"
                echo "INITIALIZER_UPDATED=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Could not extract version from initializer.bal"
              echo "INITIALIZER_UPDATED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "initializer.bal not found in ${{ inputs.working_dir }}"
            echo "INITIALIZER_UPDATED=false" >> $GITHUB_OUTPUT
          fi

      - name: Ballerina Build after incrementing version
        if: ${{ inputs.bal_central_environment == 'PROD' }}
        run: |
          pushd "${{ inputs.working_dir }}"
          bal pack
          popd

      - name: Commit changes and make a PR
        if: ${{ inputs.bal_central_environment == 'PROD' }}
        run: |
          # Extract the package name from working directory 
          packageName=$(basename ${{ inputs.working_dir }})

          # Commit changes
          git config --global user.name ${{ secrets.BALLERINA_BOT_USERNAME }}
          git config --global user.email ${{ secrets.BALLERINA_BOT_EMAIL }}
          git add ${{ inputs.working_dir }}/Ballerina.toml
          git add ${{ inputs.working_dir }}/Dependencies.toml
          
          # Add initializer.bal if it was updated
          if [ "${{ steps.update_initializer.outputs.INITIALIZER_UPDATED }}" == "true" ]; then
            git add ${{ inputs.working_dir }}/initializer.bal
            COMMIT_MESSAGE="[Release ${packageName} ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle - Updated initializer.bal version from ${{ steps.update_initializer.outputs.OLD_INIT_VERSION }} to ${{ steps.update_initializer.outputs.NEW_INIT_VERSION }}"
          else
            COMMIT_MESSAGE="[Release ${packageName} ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle"
          fi
          
          git commit -m "$COMMIT_MESSAGE"
          git push origin ${{ steps.publish_release.outputs.BRANCH_NAME }}
          
          # Set the base and head branches
          BASE_BRANCH="main"
          HEAD_BRANCH="${{ steps.publish_release.outputs.BRANCH_NAME }}"
          # Set PR title based on whether initializer was updated
          if [ "${{ steps.update_initializer.outputs.INITIALIZER_UPDATED }}" == "true" ]; then
            PR_TITLE="[Release ${packageName} ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle - Updated initializer.bal version"
          else
            PR_TITLE="[Release ${packageName} ${{ steps.increment_patch_version.outputs.CURRENT_VERSION }}] Prepare for next dev cycle"
          fi
          
          # Create the pull request using the GitHub REST API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.BALLERINA_BOT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "'"$PR_TITLE"'",
              "body": "",
              "head": "'"$HEAD_BRANCH"'",
              "base": "'"$BASE_BRANCH"'"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
          # Extract the pull request URL from the response
          PR_URL=$(echo "$RESPONSE" | jq -r '.html_url')

          echo "Pull Request created: $PR_URL"
